"""
Django settings for strykr_api project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import dj_database_url
import environ

from corsheaders.defaults import default_headers
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent


# Environment variables

env = environ.Env()
env.read_env(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = env.str(
	"SECRET_KEY",
	"django-insecure-5jwr9hp-0)#9s5d-y^zhqdtc^_3h@5()n&^rxuq(q8kmj@p_u_",
)

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = env.bool("DEBUG", False)

if DEBUG:
	ALLOWED_HOSTS = [
		"localhost",
		"127.0.0.1"
		"strykr-api-staging.up.railway.app",
		"strykr-api-production.up.railway.app",
	]

	CORS_ALLOW_ALL_ORIGINS = True

	CORS_TRUSTED_ORIGINS = [
		"http://localhost:8000",
        "http://127.0.0.1:8000",
        "https://strykr-api-staging.up.railway.app",

	]
else:
	ALLOWED_HOSTS = [
		"api.strykr.ai",
		"strykr-api-staging.up.railway.app",
		"strykr-api-production.up.railway.app",
		".railway.app"
	]

	CORS_ALLOWED_ORIGINS = [
        "https://strykr-api-staging.up.railway.app",
        "https://strykr-api-production.up.railway.app",
        "https://api.strykr.ai",
    ]

	CSRF_TRUSTED_ORIGINS = [
        "https://strykr-api-staging.up.railway.app",
        "https://strykr-api-production.up.railway.app",
        "https://api.strykr.ai",
		"https://*.railway.app",
    ]
	SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
	# CORS_ALLOW_ALL_ORIGINS = False


# Application definition

INSTALLED_APPS = [
	"django.contrib.admin",
	"django.contrib.auth",
	"django.contrib.contenttypes",
	"django.contrib.sessions",
	"django.contrib.messages",
	"django.contrib.staticfiles",
	"corsheaders",
	"core",
	'django_extensions',
]

# Custom GZip middleware that skips streaming responses
class StreamingGZipMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response
        # Import Django's GZipMiddleware
        from django.middleware.gzip import GZipMiddleware
        self.gzip_middleware = GZipMiddleware(get_response)

    def __call__(self, request):
        response = self.get_response(request)
        
        # Skip compression for streaming responses
        if (hasattr(response, 'streaming') and response.streaming) or \
           response.get('Content-Type', '').startswith('text/event-stream') or \
           response.get('X-Skip-Gzip') == 'true':
            return response
        
        # Apply normal gzip compression for other responses
        return self.gzip_middleware.process_response(request, response)

MIDDLEWARE = [
	"django.middleware.security.SecurityMiddleware",
	"strykr_api.settings.StreamingGZipMiddleware",
	"whitenoise.middleware.WhiteNoiseMiddleware",
	"django.contrib.sessions.middleware.SessionMiddleware",
	"corsheaders.middleware.CorsMiddleware",
	"django.middleware.common.CommonMiddleware",
	"django.middleware.csrf.CsrfViewMiddleware",
	"django.contrib.auth.middleware.AuthenticationMiddleware",
	"django.contrib.messages.middleware.MessageMiddleware",
	"django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "strykr_api.urls"

TEMPLATES = [
	{
		"BACKEND": "django.template.backends.django.DjangoTemplates",
		"DIRS": [],
		"APP_DIRS": True,
		"OPTIONS": {
			"context_processors": [
				"django.template.context_processors.debug",
				"django.template.context_processors.request",
				"django.contrib.auth.context_processors.auth",
				"django.contrib.messages.context_processors.messages",
			],
		},
	},
]

WSGI_APPLICATION = "strykr_api.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

import os 

DATABASES = {
	'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get("PGDATABASE", "strykr_api_db"),
        'USER': os.environ.get("PGUSER", "postgres"),
        'PASSWORD': os.environ.get("PGPASSWORD", ""),
        'HOST': os.environ.get("PGHOST", "localhost"),
        'PORT': os.environ.get("PGPORT", "5432"),
        'CONN_MAX_AGE': 300,  # Keep connections alive for 5 minutes
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
	},
	{
		"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
	},
	{
		"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
	},
	{
		"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
	},
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

STORAGES = {
	"staticfiles": {
		"BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
	},
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOW_HEADERS = default_headers + ("x-api-key",)


# Financial Modeling Prep API

FMP_API_KEY = env.str("FMP_API_KEY", default="")

# CoinGecko API Settings

COINGECKO_API_KEY = env.str("COINGECKO_API_KEY", default="")
COINGECKO_BASE_URL = env.str("COINGECKO_BASE_URL", default="https://pro-api.coingecko.com/api/v3")

# Moralis API

MORALIS_API_KEY = env.str("MORALIS_API_KEY", default="")

# DeepSeek API

DEEPSEEK_API_KEY = env.str("DEEPSEEK_API_KEY", default="")

# Redis Cache Configuration
REDIS_URL = env.str("REDIS_URL", default="redis://localhost:6379/0")

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'strykr_api',
    }
}