# Generated by Django 5.1.4 on 2025-07-16 05:00

import core.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.CharField(default='NOTAREALUSERID', max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('key', models.CharField(db_index=True, default=core.models.create_random_api_key, max_length=24, unique=True)),
                ('client_side_key', models.CharField(db_index=True, default=core.models.create_random_api_key, max_length=24, unique=True)),
                ('allowed_domains', models.JSONField(blank=True, default=list, null=True)),
                ('is_revoked', models.BooleanField(default=False)),
                ('is_unlimited', models.BooleanField(default=False)),
                ('daily_limit', models.IntegerField(default=0)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('monthly_limit', models.IntegerField(default=0)),
                ('permission_level', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BellwetherAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('symbol', models.CharField(max_length=255)),
                ('descriptors', models.TextField()),
                ('api_type', models.IntegerField()),
                ('data_type', models.CharField(max_length=255)),
                ('data', models.JSONField(default=dict)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='EconomicEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('month', models.CharField(max_length=3)),
                ('year', models.CharField(max_length=4)),
                ('data', models.JSONField(default=dict)),
            ],
            options={
                'verbose_name_plural': 'Economic events',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='NewsMarketAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('summary', models.TextField()),
                ('sentiment', models.CharField(choices=[('Bullish', 'Bullish'), ('Neutral', 'Neutral'), ('Bearish', 'Bearish')], default='Neutral', max_length=20)),
                ('sentiment_reasoning', models.TextField()),
                ('news_articles', models.JSONField(default=list)),
            ],
            options={
                'verbose_name': 'News Market Alert',
                'verbose_name_plural': 'News Market Alerts',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Org',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('is_verified', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='AIQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('query', models.TextField()),
                ('third_party_user_id', models.CharField(blank=True, max_length=255)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('api_key', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.apikey')),
            ],
            options={
                'verbose_name_plural': 'AI queries',
            },
        ),
        migrations.CreateModel(
            name='BacktestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('strategy_name', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('initial_capital', models.DecimalField(decimal_places=2, default=100000.0, max_digits=20)),
                ('rebalance_frequency', models.CharField(choices=[('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly')], default='DAILY', max_length=20)),
                ('max_positions', models.IntegerField(default=10)),
                ('position_sizing', models.CharField(choices=[('EQUAL_WEIGHT', 'Equal Weight'), ('CONFIDENCE_WEIGHT', 'Confidence Weighted'), ('VOLATILITY_WEIGHT', 'Volatility Weighted'), ('RISK_PARITY', 'Risk Parity')], default='EQUAL_WEIGHT', max_length=20)),
                ('final_value', models.DecimalField(decimal_places=2, max_digits=20)),
                ('total_return', models.DecimalField(decimal_places=4, max_digits=10)),
                ('annualized_return', models.DecimalField(decimal_places=4, max_digits=10)),
                ('volatility', models.DecimalField(decimal_places=3, max_digits=6)),
                ('sharpe_ratio', models.DecimalField(decimal_places=3, max_digits=6)),
                ('max_drawdown', models.DecimalField(decimal_places=4, max_digits=10)),
                ('calmar_ratio', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('var_95', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('beta', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('alpha', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('total_trades', models.IntegerField(default=0)),
                ('winning_trades', models.IntegerField(default=0)),
                ('losing_trades', models.IntegerField(default=0)),
                ('win_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('avg_win', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('avg_loss', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('profit_factor', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('benchmark_return', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('excess_return', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('information_ratio', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('configuration', models.JSONField(default=dict)),
                ('execution_time', models.DurationField(blank=True, null=True)),
                ('data_quality_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
            ],
            options={
                'verbose_name': 'Backtest Result',
                'verbose_name_plural': 'Backtest Results',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['strategy_name', 'start_date', 'end_date'], name='core_backte_strateg_9614e3_idx'), models.Index(fields=['annualized_return', 'sharpe_ratio'], name='core_backte_annuali_ac6e7f_idx'), models.Index(fields=['start_date', 'end_date'], name='core_backte_start_d_2d8f10_idx'), models.Index(fields=['total_return'], name='core_backte_total_r_dec61b_idx')],
            },
        ),
        migrations.CreateModel(
            name='CalendarMarketAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('analysis_period_start', models.DateTimeField()),
                ('volatile_window_start', models.DateTimeField()),
                ('volatile_window_end', models.DateTimeField()),
                ('strykr_score', models.FloatField(default=0.0)),
                ('window_volatility_rating', models.FloatField(default=0.0)),
                ('window_volatility_intensity', models.CharField(choices=[('Low', 'Low'), ('Moderate', 'Moderate'), ('High', 'High'), ('Extreme', 'Extreme'), ('Critical', 'Critical')], default='Low', max_length=20)),
                ('short_summary', models.TextField()),
                ('full_analysis', models.TextField()),
                ('events_analyzed', models.JSONField(default=list)),
            ],
            options={
                'verbose_name': 'Calendar Market Alert',
                'verbose_name_plural': 'Calendar Market Alerts',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['timestamp'], name='core_calend_timesta_e5b2ea_idx'), models.Index(fields=['window_volatility_intensity'], name='core_calend_window__bbf8b4_idx')],
            },
        ),
        migrations.CreateModel(
            name='CryptoNewsAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('summary', models.TextField()),
                ('sentiment', models.CharField(choices=[('Bullish', 'Bullish'), ('Neutral', 'Neutral'), ('Bearish', 'Bearish')], default='Neutral', max_length=20)),
                ('sentiment_reasoning', models.TextField()),
                ('crypto_news_articles', models.JSONField(default=list)),
            ],
            options={
                'verbose_name': 'Crypto News Alert',
                'verbose_name_plural': 'Crypto News Alerts',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['timestamp'], name='core_crypto_timesta_4b003d_idx'), models.Index(fields=['sentiment'], name='core_crypto_sentime_7c341d_idx')],
            },
        ),
        migrations.CreateModel(
            name='HistoricalMarketData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('analysis_date', models.DateField(db_index=True)),
                ('symbol', models.CharField(db_index=True, max_length=50)),
                ('asset_type', models.CharField(choices=[('STOCK', 'Stock'), ('CRYPTO', 'Cryptocurrency'), ('ETF', 'ETF'), ('FOREX', 'Forex'), ('COMMODITY', 'Commodity')], db_index=True, default='STOCK', max_length=20)),
                ('open_price', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('close_price', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('high_price', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('low_price', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('volume', models.BigIntegerField(blank=True, null=True)),
                ('market_cap', models.BigIntegerField(blank=True, null=True)),
                ('change_1d', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('change_7d', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('change_30d', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('rsi_14', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('ema_50', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('sma_200', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('screener_position', models.CharField(blank=True, choices=[('LONG', 'Long Position'), ('SHORT', 'Short Position'), ('NEUTRAL', 'Neutral')], db_index=True, max_length=20, null=True)),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('rank_in_category', models.IntegerField(blank=True, null=True)),
                ('sector', models.CharField(blank=True, max_length=100, null=True)),
                ('industry', models.CharField(blank=True, max_length=100, null=True)),
                ('data_source', models.CharField(default='strykr_api', max_length=50)),
            ],
            options={
                'verbose_name': 'Historical Market Data',
                'verbose_name_plural': 'Historical Market Data',
                'ordering': ['-analysis_date', '-timestamp'],
                'indexes': [models.Index(fields=['symbol', 'analysis_date'], name='core_histor_symbol_9fa8de_idx'), models.Index(fields=['asset_type', 'analysis_date'], name='core_histor_asset_t_f7240e_idx'), models.Index(fields=['screener_position', 'analysis_date'], name='core_histor_screene_7ff392_idx'), models.Index(fields=['analysis_date', 'confidence_score'], name='core_histor_analysi_c417d0_idx'), models.Index(fields=['sector', 'analysis_date'], name='core_histor_sector_40982a_idx'), models.Index(fields=['symbol', 'asset_type', 'analysis_date'], name='core_histor_symbol_7dc180_idx')],
                'constraints': [models.UniqueConstraint(fields=('symbol', 'asset_type', 'analysis_date'), name='unique_symbol_type_date')],
            },
        ),
        migrations.CreateModel(
            name='MarketAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('risk_level', models.CharField(choices=[('LOW', 'Low Risk'), ('MEDIUM', 'Medium Risk'), ('HIGH', 'High Risk')], max_length=20)),
                ('short_summary', models.CharField(max_length=200)),
                ('full_analysis', models.JSONField(default=dict)),
                ('assets_analyzed', models.ManyToManyField(to='core.bellwetherasset')),
            ],
            options={
                'verbose_name': 'Market Alert',
                'verbose_name_plural': 'Market Alerts',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='MarketScreenerResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('analysis_date', models.DateField()),
                ('top_stocks_long', models.JSONField(default=list)),
                ('top_stocks_short', models.JSONField(default=list)),
                ('top_cryptos_long', models.JSONField(default=list)),
                ('top_cryptos_short', models.JSONField(default=list)),
                ('market_sentiment_score', models.FloatField(default=0.0, help_text='Market sentiment score from -100 to 100')),
                ('market_sentiment', models.CharField(choices=[('Bearish', 'Bearish'), ('Mildly Bearish', 'Mildly Bearish'), ('Neutral', 'Neutral'), ('Mildly Bullish', 'Mildly Bullish'), ('Bullish', 'Bullish')], default='Neutral', max_length=20)),
                ('explanation', models.TextField(blank=True, help_text='GPT-generated explanation of market sentiment and recommendations')),
            ],
            options={
                'verbose_name': 'Market Screener Result',
                'verbose_name_plural': 'Market Screener Results',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['timestamp'], name='core_market_timesta_27e594_idx'), models.Index(fields=['analysis_date'], name='core_market_analysi_63b294_idx'), models.Index(fields=['market_sentiment'], name='core_market_market__9a500d_idx')],
            },
        ),
        migrations.AddField(
            model_name='apikey',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.org'),
        ),
        migrations.CreateModel(
            name='PortfolioSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('snapshot_date', models.DateField(db_index=True)),
                ('portfolio_name', models.CharField(default='default', max_length=100)),
                ('strategy_type', models.CharField(choices=[('LONG_ONLY', 'Long Only'), ('SHORT_ONLY', 'Short Only'), ('LONG_SHORT', 'Long/Short'), ('MARKET_NEUTRAL', 'Market Neutral')], default='LONG_SHORT', max_length=50)),
                ('total_value', models.DecimalField(decimal_places=2, default=100000.0, max_digits=20)),
                ('long_exposure', models.DecimalField(decimal_places=2, default=0.0, max_digits=20)),
                ('short_exposure', models.DecimalField(decimal_places=2, default=0.0, max_digits=20)),
                ('cash_balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=20)),
                ('daily_return', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('cumulative_return', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('max_drawdown', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('sharpe_ratio', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('volatility', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('var_95', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('beta', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('market_sentiment_score', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('benchmark_return', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('source_screener', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='portfolio_snapshots', to='core.marketscreenerresult')),
            ],
            options={
                'verbose_name': 'Portfolio Snapshot',
                'verbose_name_plural': 'Portfolio Snapshots',
                'ordering': ['-snapshot_date', '-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='PortfolioPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(db_index=True, max_length=50)),
                ('asset_type', models.CharField(choices=[('STOCK', 'Stock'), ('CRYPTO', 'Cryptocurrency'), ('ETF', 'ETF'), ('FOREX', 'Forex'), ('COMMODITY', 'Commodity')], max_length=20)),
                ('position_type', models.CharField(choices=[('LONG', 'Long'), ('SHORT', 'Short')], max_length=10)),
                ('quantity', models.DecimalField(decimal_places=8, max_digits=20)),
                ('entry_price', models.DecimalField(decimal_places=8, max_digits=20)),
                ('current_price', models.DecimalField(decimal_places=8, max_digits=20)),
                ('position_value', models.DecimalField(decimal_places=2, max_digits=20)),
                ('weight', models.DecimalField(decimal_places=4, max_digits=6)),
                ('unrealized_pnl', models.DecimalField(decimal_places=2, default=0.0, max_digits=20)),
                ('unrealized_pnl_percent', models.DecimalField(decimal_places=4, default=0.0, max_digits=10)),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('original_rank', models.IntegerField(blank=True, null=True)),
                ('stop_loss', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('take_profit', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('historical_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='positions', to='core.historicalmarketdata')),
                ('portfolio_snapshot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='core.portfoliosnapshot')),
            ],
            options={
                'verbose_name': 'Portfolio Position',
                'verbose_name_plural': 'Portfolio Positions',
                'ordering': ['-weight', 'symbol'],
            },
        ),
        migrations.CreateModel(
            name='TradingSignal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('signal_date', models.DateField(db_index=True)),
                ('symbol', models.CharField(db_index=True, max_length=50)),
                ('asset_type', models.CharField(choices=[('STOCK', 'Stock'), ('CRYPTO', 'Cryptocurrency'), ('ETF', 'ETF'), ('FOREX', 'Forex'), ('COMMODITY', 'Commodity')], max_length=20)),
                ('signal_type', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell'), ('HOLD', 'Hold')], db_index=True, max_length=10)),
                ('strength', models.CharField(choices=[('WEAK', 'Weak'), ('MODERATE', 'Moderate'), ('STRONG', 'Strong')], default='MODERATE', max_length=10)),
                ('confidence_score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('signal_price', models.DecimalField(decimal_places=8, max_digits=20)),
                ('target_price', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('stop_loss_price', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('timeframe', models.CharField(default='1-7 days', max_length=20)),
                ('reasoning', models.TextField(blank=True)),
                ('technical_factors', models.JSONField(default=list)),
                ('fundamental_factors', models.JSONField(default=list)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('EXECUTED', 'Executed'), ('EXPIRED', 'Expired'), ('CANCELLED', 'Cancelled')], db_index=True, default='ACTIVE', max_length=20)),
                ('exit_price', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('exit_date', models.DateField(blank=True, null=True)),
                ('realized_return', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('holding_period', models.IntegerField(blank=True, null=True)),
                ('source_screener', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trading_signals', to='core.marketscreenerresult')),
            ],
            options={
                'verbose_name': 'Trading Signal',
                'verbose_name_plural': 'Trading Signals',
                'ordering': ['-signal_date', '-confidence_score'],
            },
        ),
        migrations.AddIndex(
            model_name='portfoliosnapshot',
            index=models.Index(fields=['portfolio_name', 'snapshot_date'], name='core_portfo_portfol_8bc143_idx'),
        ),
        migrations.AddIndex(
            model_name='portfoliosnapshot',
            index=models.Index(fields=['strategy_type', 'snapshot_date'], name='core_portfo_strateg_e4e79f_idx'),
        ),
        migrations.AddIndex(
            model_name='portfoliosnapshot',
            index=models.Index(fields=['snapshot_date', 'total_value'], name='core_portfo_snapsho_7ee116_idx'),
        ),
        migrations.AddIndex(
            model_name='portfoliosnapshot',
            index=models.Index(fields=['snapshot_date', 'cumulative_return'], name='core_portfo_snapsho_98cf19_idx'),
        ),
        migrations.AddIndex(
            model_name='portfolioposition',
            index=models.Index(fields=['symbol', 'position_type'], name='core_portfo_symbol_ef59fa_idx'),
        ),
        migrations.AddIndex(
            model_name='portfolioposition',
            index=models.Index(fields=['portfolio_snapshot', 'symbol'], name='core_portfo_portfol_9392b7_idx'),
        ),
        migrations.AddIndex(
            model_name='portfolioposition',
            index=models.Index(fields=['position_type', 'unrealized_pnl_percent'], name='core_portfo_positio_106069_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsignal',
            index=models.Index(fields=['symbol', 'signal_date'], name='core_tradin_symbol_3f066a_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsignal',
            index=models.Index(fields=['signal_type', 'signal_date'], name='core_tradin_signal__4ebe9a_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsignal',
            index=models.Index(fields=['status', 'signal_date'], name='core_tradin_status_1250bd_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsignal',
            index=models.Index(fields=['confidence_score', 'signal_date'], name='core_tradin_confide_20aefe_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsignal',
            index=models.Index(fields=['asset_type', 'signal_type', 'signal_date'], name='core_tradin_asset_t_3b09e0_idx'),
        ),
    ]
