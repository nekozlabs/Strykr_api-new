# Generated by Django 5.1.4 on 2025-03-28 08:58

import core.models
import django.contrib.postgres.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

	initial = True

	dependencies = [
		migrations.swappable_dependency(settings.AUTH_USER_MODEL),
	]

	operations = [
		migrations.CreateModel(
			name="APIKey",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True,
						primary_key=True,
						serialize=False,
						verbose_name="ID",
					),
				),
				("created_at", models.DateTimeField(auto_now_add=True)),
				("updated_at", models.DateTimeField(auto_now=True)),
				("user_id", models.CharField(default="NOTAREALUSERID", max_length=255)),
				("name", models.CharField(max_length=255)),
				(
					"key",
					models.CharField(
						db_index=True,
						default=core.models.create_random_api_key,
						max_length=24,
						unique=True,
					),
				),
				(
					"client_side_key",
					models.CharField(
						db_index=True,
						default=core.models.create_random_api_key,
						max_length=24,
						unique=True,
					),
				),
				(
					"allowed_domains",
					django.contrib.postgres.fields.ArrayField(
						base_field=models.CharField(max_length=255),
						blank=True,
						default=list,
						null=True,
						size=None,
					),
				),
				("is_revoked", models.BooleanField(default=False)),
				("is_unlimited", models.BooleanField(default=False)),
				("daily_limit", models.IntegerField(default=0)),
				("expires_at", models.DateTimeField(blank=True, null=True)),
				("monthly_limit", models.IntegerField(default=0)),
				(
					"permission_level",
					models.CharField(blank=True, max_length=255, null=True),
				),
			],
		),
		migrations.CreateModel(
			name="BellwetherAsset",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True,
						primary_key=True,
						serialize=False,
						verbose_name="ID",
					),
				),
				("updated_at", models.DateTimeField(auto_now=True)),
				("name", models.CharField(max_length=255)),
				("symbol", models.CharField(max_length=255)),
				("descriptors", models.TextField()),
				("api_type", models.IntegerField()),
				("data_type", models.CharField(max_length=255)),
				("data", models.JSONField(default=dict)),
			],
			options={
				"ordering": ["-updated_at"],
			},
		),
		migrations.CreateModel(
			name="EconomicEvents",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True,
						primary_key=True,
						serialize=False,
						verbose_name="ID",
					),
				),
				("updated_at", models.DateTimeField(auto_now=True)),
				("month", models.CharField(max_length=3)),
				("year", models.CharField(max_length=4)),
				("data", models.JSONField(default=dict)),
			],
			options={
				"verbose_name_plural": "Economic events",
				"ordering": ["-updated_at"],
			},
		),
		migrations.CreateModel(
			name="Org",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True,
						primary_key=True,
						serialize=False,
						verbose_name="ID",
					),
				),
				("created_at", models.DateTimeField(auto_now_add=True)),
				("updated_at", models.DateTimeField(auto_now=True)),
				("name", models.CharField(max_length=255)),
				("is_verified", models.BooleanField(default=False)),
			],
		),
		migrations.CreateModel(
			name="AIQuery",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True,
						primary_key=True,
						serialize=False,
						verbose_name="ID",
					),
				),
				("created_at", models.DateTimeField(auto_now_add=True)),
				("query", models.TextField()),
				("third_party_user_id", models.CharField(blank=True, max_length=255)),
				(
					"user",
					models.ForeignKey(
						blank=True,
						null=True,
						on_delete=django.db.models.deletion.SET_NULL,
						to=settings.AUTH_USER_MODEL,
					),
				),
				(
					"api_key",
					models.ForeignKey(
						blank=True,
						null=True,
						on_delete=django.db.models.deletion.SET_NULL,
						to="core.apikey",
					),
				),
			],
			options={
				"verbose_name_plural": "AI queries",
			},
		),
		migrations.CreateModel(
			name="CalendarMarketAlert",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True,
						primary_key=True,
						serialize=False,
						verbose_name="ID",
					),
				),
				("timestamp", models.DateTimeField(auto_now_add=True)),
				("analysis_period_start", models.DateTimeField()),
				("volatile_window_start", models.DateTimeField()),
				("volatile_window_end", models.DateTimeField()),
				("strykr_score", models.FloatField(default=0.0)),
				("window_volatility_rating", models.FloatField(default=0.0)),
				(
					"window_volatility_intensity",
					models.CharField(
						choices=[
							("Low", "Low"),
							("Moderate", "Moderate"),
							("High", "High"),
							("Extreme", "Extreme"),
							("Critical", "Critical"),
						],
						default="Low",
						max_length=20,
					),
				),
				("short_summary", models.TextField()),
				("full_analysis", models.TextField()),
				("sent", models.BooleanField(default=False)),
				("events_analyzed", models.JSONField(default=list)),
			],
			options={
				"verbose_name": "Calendar Market Alert",
				"verbose_name_plural": "Calendar Market Alerts",
				"ordering": ["-timestamp"],
				"indexes": [
					models.Index(
						fields=["timestamp"], name="core_calend_timesta_e5b2ea_idx"
					),
					models.Index(
						fields=["window_volatility_intensity"],
						name="core_calend_window__bbf8b4_idx",
					),
					models.Index(fields=["sent"], name="core_calend_sent_bdba0c_idx"),
				],
			},
		),
		migrations.CreateModel(
			name="MarketAlert",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True,
						primary_key=True,
						serialize=False,
						verbose_name="ID",
					),
				),
				("timestamp", models.DateTimeField(auto_now_add=True)),
				(
					"risk_level",
					models.CharField(
						choices=[
							("LOW", "Low Risk"),
							("MEDIUM", "Medium Risk"),
							("HIGH", "High Risk"),
						],
						max_length=20,
					),
				),
				("short_summary", models.CharField(max_length=100)),
				("full_analysis", models.JSONField(default=dict)),
				("sent", models.BooleanField(default=False)),
				("assets_analyzed", models.ManyToManyField(to="core.bellwetherasset")),
			],
			options={
				"verbose_name": "Market Alert",
				"verbose_name_plural": "Market Alerts",
				"ordering": ["-timestamp"],
			},
		),
		migrations.CreateModel(
			name="MarketScreenerResult",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True,
						primary_key=True,
						serialize=False,
						verbose_name="ID",
					),
				),
				("timestamp", models.DateTimeField(auto_now_add=True)),
				("analysis_date", models.DateField()),
				("top_stocks_long", models.JSONField(default=list)),
				("top_stocks_short", models.JSONField(default=list)),
				("top_cryptos_long", models.JSONField(default=list)),
				("top_cryptos_short", models.JSONField(default=list)),
				("sent", models.BooleanField(default=False)),
				(
					"market_sentiment_score",
					models.FloatField(
						default=0.0, help_text="Market sentiment score from -100 to 100"
					),
				),
				(
					"market_sentiment",
					models.CharField(
						choices=[
							("Bearish", "Bearish"),
							("Mildly Bearish", "Mildly Bearish"),
							("Neutral", "Neutral"),
							("Mildly Bullish", "Mildly Bullish"),
							("Bullish", "Bullish"),
						],
						default="Neutral",
						max_length=20,
					),
				),
				(
					"explanation",
					models.TextField(
						blank=True,
						help_text="GPT-generated explanation of market sentiment and recommendations",
					),
				),
			],
			options={
				"verbose_name": "Market Screener Result",
				"verbose_name_plural": "Market Screener Results",
				"ordering": ["-timestamp"],
				"indexes": [
					models.Index(
						fields=["timestamp"], name="core_market_timesta_27e594_idx"
					),
					models.Index(fields=["sent"], name="core_market_sent_4f1e03_idx"),
					models.Index(
						fields=["analysis_date"], name="core_market_analysi_63b294_idx"
					),
					models.Index(
						fields=["market_sentiment"],
						name="core_market_market__9a500d_idx",
					),
				],
			},
		),
		migrations.AddField(
			model_name="apikey",
			name="org",
			field=models.ForeignKey(
				on_delete=django.db.models.deletion.CASCADE, to="core.org"
			),
		),
	]
